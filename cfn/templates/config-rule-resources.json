{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description":"Creates Config rules and permissions",
  "Parameters": {
    "LambdaArnBase": {
      "Type": "String",
      "Default": "arn:aws:lambda:"
    },
    "LambdaArnFunctionPrefix": {
      "Type": "String",
      "Default": ":function:ConfigRuleStatus"
    },
    "LambdaStage":{
      "Type": "String",
      "Default": "prod"
    }
  },
  "Resources":{
    "ec2VPCRule":{
      "Type":"AWS::Config::ConfigRule",
      "Properties":{
        "ConfigRuleName":"ConfigRuleStatus-EC2-VPC-Rule",
        "Description": "Checks whether your EC2 instances belong to a virtual private cloud (VPC).",
        "Scope":{
          "ComplianceResourceTypes":[
          ]
        },
        "Source":{
          "Owner":"AWS",
          "SourceDetails":[],
          "SourceIdentifier":"INSTANCES_IN_VPC"
        }
      }
    },
    "ec2SSHRule":{
      "Type":"AWS::Config::ConfigRule",
      "Properties":{
        "ConfigRuleName":"ConfigRuleStatus-EC2-SSH-Rule",
        "Description": "Checks whether security groups that are in use disallow unrestricted incoming SSH traffic.",
        "Scope":{
          "ComplianceResourceTypes":[
          ]
        },
        "Source":{
          "Owner":"AWS",
          "SourceDetails":[],
          "SourceIdentifier":"INCOMING_SSH_DISABLED"
        }
      }
    },
    "ec2EncryptionRule":{
      "Type":"AWS::Config::ConfigRule",
      "Properties":{
        "ConfigRuleName":"ConfigRuleStatus-EC2-Encryption-Rule",
        "Description": "Checks whether EBS volumes that are in an attached state are encrypted.",
        "Scope":{
          "ComplianceResourceTypes":[
          ]
        },
        "Source":{
          "Owner":"AWS",
          "SourceDetails":[],
          "SourceIdentifier":"ENCRYPTED_VOLUMES"
        }
      }
    },
    "iamMFARule":{
      "Type":"AWS::Config::ConfigRule",
      "Properties":{
        "ConfigRuleName":"ConfigRuleStatus-IAM-MFA-Rule",
        "Description": "Checks whether Users have an MFA Device configured.",
        "Scope":{
          "ComplianceResourceTypes":[
            "AWS::IAM::User"
          ]
        },
        "Source":{
          "Owner":"CUSTOM_LAMBDA",
          "SourceDetails":[
            {
              "EventSource":"aws.config",
              "MessageType":"ConfigurationItemChangeNotification"
            }
          ],
          "SourceIdentifier":{"Fn::Join":["", [
            { "Ref" : "LambdaArnBase" },
            {"Fn::Join":[":",[
              {"Ref": "AWS::Region"},
              {"Ref": "AWS::AccountId"}]]},
            {"Ref": "LambdaArnFunctionPrefix"},
            {"Fn::Join":[":",["-userMFA", {"Ref": "LambdaStage"} ]]}
          ]
          ]}
        }
      },
      "DependsOn":"iamMFAPerm"
    },
    "iamUserInlinePolicyRule":{
      "Type":"AWS::Config::ConfigRule",
      "Properties":{
        "ConfigRuleName":"ConfigRuleStatus-IAM-User-InlinePolicy-Rule",
        "Description": "Checks whether Users have an inline policy.",
        "Scope":{
          "ComplianceResourceTypes":[
            "AWS::IAM::User"
          ]
        },
        "Source":{
          "Owner":"CUSTOM_LAMBDA",
          "SourceDetails":[
            {
              "EventSource":"aws.config",
              "MessageType":"ConfigurationItemChangeNotification"
            }
          ],
          "SourceIdentifier":{"Fn::Join":["", [
            { "Ref" : "LambdaArnBase" },
            {"Fn::Join":[":",[
              {"Ref": "AWS::Region"},
              {"Ref": "AWS::AccountId"}]]},
            {"Ref": "LambdaArnFunctionPrefix"},
            {"Fn::Join":[":",["-userInlinePolicy", {"Ref": "LambdaStage"} ]]}
          ]
          ]}
        }
      },
      "DependsOn":"iamUserInlinePolicyPerm"
    },
    "iamUserManagedPolicyRule":{
      "Type":"AWS::Config::ConfigRule",
      "Properties":{
        "ConfigRuleName":"ConfigRuleStatus-IAM-User-ManagedPolicy-Rule",
        "Description": "Checks whether Users have a managed policy directly attached.",
        "Scope":{
          "ComplianceResourceTypes":[
            "AWS::IAM::User"
          ]
        },
        "Source":{
          "Owner":"CUSTOM_LAMBDA",
          "SourceDetails":[
            {
              "EventSource":"aws.config",
              "MessageType":"ConfigurationItemChangeNotification"
            }
          ],
          "SourceIdentifier":{"Fn::Join":["", [
            { "Ref" : "LambdaArnBase" },
            {"Fn::Join":[":",[
              {"Ref": "AWS::Region"},
              {"Ref": "AWS::AccountId"}]]},
            {"Ref": "LambdaArnFunctionPrefix"},
            {"Fn::Join":[":",["-userManagedPolicy", {"Ref": "LambdaStage"} ]]}
          ]
          ]}
        }
      },
      "DependsOn":"iamUserManagedPolicyPerm"
    },
    "ec2SecGrpCidrIngressRule":{
      "Type":"AWS::Config::ConfigRule",
      "Properties":{
        "ConfigRuleName":"ConfigRuleStatus-EC2-SecGrp-Cidr-Ingress-Rule",
        "Description": "Checks whether a Security Group has an ingress rule with a CIDR range that disallows unrestricted traffic and applies to a single host.",
        "Scope":{
          "ComplianceResourceTypes":[
            "AWS::EC2::SecurityGroup"
          ]
        },
        "Source":{
          "Owner":"CUSTOM_LAMBDA",
          "SourceDetails":[
            {
              "EventSource":"aws.config",
              "MessageType":"ConfigurationItemChangeNotification"
            }
          ],
          "SourceIdentifier":{"Fn::Join":["", [
            { "Ref" : "LambdaArnBase" },
            {"Fn::Join":[":",[
              {"Ref": "AWS::Region"},
              {"Ref": "AWS::AccountId"}]]},
            {"Ref": "LambdaArnFunctionPrefix"},
            {"Fn::Join":[":",["-cidrIngress", {"Ref": "LambdaStage"} ]]}
          ]
          ]}
        }
      },
      "DependsOn":"ec2SecGrpCidrIngressPerm"
    },
    "ec2SecGrpCidrEgressRule":{
      "Type":"AWS::Config::ConfigRule",
      "Properties":{
        "ConfigRuleName":"ConfigRuleStatus-EC2-SecGrp-Cidr-Egress-Rule",
        "Description": "Checks whether a Security Group has an egress rule with a CIDR range that disallows unrestricted traffic and applies to a single host.",
        "Scope":{
          "ComplianceResourceTypes":[
            "AWS::EC2::SecurityGroup"
          ]
        },
        "Source":{
          "Owner":"CUSTOM_LAMBDA",
          "SourceDetails":[
            {
              "EventSource":"aws.config",
              "MessageType":"ConfigurationItemChangeNotification"
            }
          ],
          "SourceIdentifier":{"Fn::Join":["", [
            { "Ref" : "LambdaArnBase" },
            {"Fn::Join":[":",[
              {"Ref": "AWS::Region"},
              {"Ref": "AWS::AccountId"}]]},
            {"Ref": "LambdaArnFunctionPrefix"},
            {"Fn::Join":[":",["-cidrEgress", {"Ref": "LambdaStage"} ]]}
          ]
          ]}
        }
      },
      "DependsOn":"ec2SecGrpCidrEgressPerm"
    },
    "iamMFAPerm":{
      "Type":"AWS::Lambda::Permission",
      "Properties":{
        "FunctionName":{"Fn::Join":["", [
          { "Ref" : "LambdaArnBase" },
          {"Fn::Join":[":",[
            {"Ref": "AWS::Region"},
            {"Ref": "AWS::AccountId"}]]},
          {"Ref": "LambdaArnFunctionPrefix"},
          {"Fn::Join":[":",["-userMFA", {"Ref": "LambdaStage"} ]]}
        ]
        ]},
        "Action":"lambda:InvokeFunction",
        "Principal":"config.amazonaws.com"
      }
    },
    "iamUserInlinePolicyPerm":{
      "Type":"AWS::Lambda::Permission",
      "Properties":{
        "FunctionName":{"Fn::Join":["", [
          { "Ref" : "LambdaArnBase" },
          {"Fn::Join":[":",[
            {"Ref": "AWS::Region"},
            {"Ref": "AWS::AccountId"}]]},
          {"Ref": "LambdaArnFunctionPrefix"},
          {"Fn::Join":[":",["-userInlinePolicy", {"Ref": "LambdaStage"} ]]}
        ]
        ]},
        "Action":"lambda:InvokeFunction",
        "Principal":"config.amazonaws.com"
      }
    },
    "iamUserManagedPolicyPerm":{
      "Type":"AWS::Lambda::Permission",
      "Properties":{
        "FunctionName":{"Fn::Join":["", [
          { "Ref" : "LambdaArnBase" },
          {"Fn::Join":[":",[
            {"Ref": "AWS::Region"},
            {"Ref": "AWS::AccountId"}]]},
          {"Ref": "LambdaArnFunctionPrefix"},
          {"Fn::Join":[":",["-userManagedPolicy", {"Ref": "LambdaStage"} ]]}
        ]
        ]},
        "Action":"lambda:InvokeFunction",
        "Principal":"config.amazonaws.com"
      }
    },
    "ec2SecGrpCidrIngressPerm":{
      "Type":"AWS::Lambda::Permission",
      "Properties":{
        "FunctionName":{"Fn::Join":["", [
          { "Ref" : "LambdaArnBase" },
          {"Fn::Join":[":",[
            {"Ref": "AWS::Region"},
            {"Ref": "AWS::AccountId"}]]},
          {"Ref": "LambdaArnFunctionPrefix"},
          {"Fn::Join":[":",["-cidrIngress", {"Ref": "LambdaStage"} ]]}
        ]
        ]},
        "Action":"lambda:InvokeFunction",
        "Principal":"config.amazonaws.com"
      }
    },
    "ec2SecGrpCidrEgressPerm":{
      "Type":"AWS::Lambda::Permission",
      "Properties":{
        "FunctionName":{"Fn::Join":["", [
          { "Ref" : "LambdaArnBase" },
          {"Fn::Join":[":",[
            {"Ref": "AWS::Region"},
            {"Ref": "AWS::AccountId"}]]},
          {"Ref": "LambdaArnFunctionPrefix"},
          {"Fn::Join":[":",["-cidrEgress", {"Ref": "LambdaStage"} ]]}
        ]
        ]},
        "Action":"lambda:InvokeFunction",
        "Principal":"config.amazonaws.com"
      }
    }
  },
  "Outputs":{
    "StackName":{
      "Value":{
        "Ref":"AWS::StackName"
      }
    }
  }
}
